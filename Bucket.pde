/*holds a variable amount of entities and is used to reduce the overall number of 
collision checks to only those entities within proximity */
class Bucket {

  int name; 
  private ArrayList<Entity> bucket = new ArrayList<Entity>();
  //connections to other buckets
  private ArrayList<Integer> connections = new ArrayList<Integer>();
  
  Bucket(int i){
    name = i;
    genConnections(i);
    
    //run tests only once if testMode declared
    if (testMode && !hasRunBucketTests) {
      hasRunBucketTests = true;
      tests();
    }
    
  }
  
  private void genConnections(int x){
    if ((x - 6) >= 0){connections.add(x-6);}
    if ((x - 5) >= 0){connections.add(x-5);}
    if ((x - 4) >= 0){connections.add(x-4);}
    if ((x - 1) >= 0){connections.add(x-1);}
    if ((x + 1) < 25){connections.add(x+1);}
    if ((x + 4) < 25){connections.add(x+4);}
    if ((x + 5) < 25){connections.add(x+5);}
    if ((x + 6) < 25){connections.add(x+6);}
  }
  
  public int name(){
    return name;
  }
  
  public void clear(){
    bucket.clear();
  }
  
  public void add(Entity e){
    bucket.add(e);
  }
  
  public Entity get(int i){
    return bucket.get(i);
  }
  
  public ArrayList<Entity> getAll(){
    return (ArrayList) bucket.clone();
  }
  
  public void remove(Entity e){
    bucket.remove(e);
  }
  
  public int size(){
    return bucket.size();
  }
  
  public ArrayList<Integer> getConnections(){
    return connections;
  }
  
  private void tests() {
    Bucket b = new Bucket(1);
    ArrayList<Integer> conns = b.getConnections();
    
    // show connections formed are correclty generated by
    // bucket index
    assert( conns.contains(0) );
    assert( conns.contains(5) );
    assert( conns.contains(6) );
    assert( conns.contains(7) );
    assert( conns.contains(2) );
    
    assert( !conns.contains(1) );
    assert( !conns.contains(3) );
    assert( !conns.contains(8) );
    assert( !conns.contains(9) );
    assert( !conns.contains(4) );
    
    Bucket b2 = new Bucket(12);
    ArrayList<Integer> conns2 = b2.getConnections();

    assert( conns2.contains(6) );
    assert( conns2.contains(7) );
    assert( conns2.contains(8) );
    assert( conns2.contains(11) );
    assert( conns2.contains(13) );
    
    assert( !conns2.contains(1) );
    assert( !conns2.contains(2) );
    assert( !conns2.contains(3) );
    assert( !conns2.contains(4) );
    assert( !conns2.contains(5) );

    System.out.println("bucket tests passed");
  }
}
